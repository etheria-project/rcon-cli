name: Release

on:
  push:
    tags:
      - 'v*.*.*'
  workflow_dispatch:
    inputs:
      tag:
        description: 'Tag to release'
        required: true
        type: string

env:
  CARGO_TERM_COLOR: always

jobs:
  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
      version: ${{ steps.get_version.outputs.version }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Get version
        id: get_version
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            echo "version=${{ github.event.inputs.tag }}" >> $GITHUB_OUTPUT
          else
            echo "version=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
          fi

      - name: Extract changelog content
        id: changelog
        run: |
          VERSION="${{ steps.get_version.outputs.version }}"
          VERSION_NO_V=${VERSION#v}

          # Extract the changelog content for this version
          awk -v version="$VERSION_NO_V" '
          BEGIN { found=0; content="" }
          /^## \[.*\]/ {
            if (found) exit
            if ($0 ~ "\\[" version "\\]") found=1
            next
          }
          found && /^## \[/ { exit }
          found && !/^## \[/ {
            if (content != "") content = content "\n"
            content = content $0
          }
          END {
            if (content == "") {
              print "### Release " version
              print ""
              print "- See changelog.md for details"
            } else {
              print content
            }
          }
          ' changelog.md > release_notes.md

          echo "Release notes:"
          cat release_notes.md

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.get_version.outputs.version }}
          release_name: Release ${{ steps.get_version.outputs.version }}
          body_path: release_notes.md
          draft: false
          prerelease: false

  build:
    name: Build for ${{ matrix.target }}
    needs: create-release
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - target: x86_64-pc-windows-msvc
            os: windows-latest
            artifact_name: rcon-cli.exe
            asset_name: rcon-cli-windows-x86_64.exe
          - target: x86_64-unknown-linux-gnu
            os: ubuntu-latest
            artifact_name: rcon-cli
            asset_name: rcon-cli-linux-x86_64
          - target: x86_64-apple-darwin
            os: macos-latest
            artifact_name: rcon-cli
            asset_name: rcon-cli-macos-x86_64
          - target: aarch64-apple-darwin
            os: macos-latest
            artifact_name: rcon-cli
            asset_name: rcon-cli-macos-aarch64
          - target: aarch64-unknown-linux-gnu
            os: ubuntu-latest
            artifact_name: rcon-cli
            asset_name: rcon-cli-linux-aarch64

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Install cross-compilation tools (Linux ARM64)
        if: matrix.target == 'aarch64-unknown-linux-gnu'
        run: |
          sudo apt-get update
          sudo apt-get install -y gcc-aarch64-linux-gnu
          echo "CARGO_TARGET_AARCH64_UNKNOWN_LINUX_GNU_LINKER=aarch64-linux-gnu-gcc" >> $GITHUB_ENV

      - name: Cache cargo
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-${{ matrix.target }}-cargo-${{ hashFiles('**/Cargo.lock') }}

      - name: Build release binary
        run: cargo build --release --target ${{ matrix.target }}

      - name: Strip binary (Unix)
        if: matrix.os != 'windows-latest'
        run: |
          if [ "${{ matrix.target }}" = "aarch64-unknown-linux-gnu" ]; then
            aarch64-linux-gnu-strip target/${{ matrix.target }}/release/${{ matrix.artifact_name }}
          elif [ "${{ matrix.target }}" = "x86_64-unknown-linux-gnu" ]; then
            strip target/${{ matrix.target }}/release/${{ matrix.artifact_name }}
          else
            strip target/${{ matrix.target }}/release/${{ matrix.artifact_name }}
          fi

      - name: Create release archive (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          7z a ${{ matrix.asset_name }}.zip ./target/${{ matrix.target }}/release/${{ matrix.artifact_name }}

      - name: Create release archive (Unix)
        if: matrix.os != 'windows-latest'
        run: |
          tar -czf ${{ matrix.asset_name }}.tar.gz -C target/${{ matrix.target }}/release ${{ matrix.artifact_name }}

      - name: Upload Release Asset (Windows)
        if: matrix.os == 'windows-latest'
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: ${{ matrix.asset_name }}.zip
          asset_name: ${{ matrix.asset_name }}.zip
          asset_content_type: application/zip

      - name: Upload Release Asset (Unix)
        if: matrix.os != 'windows-latest'
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: ${{ matrix.asset_name }}.tar.gz
          asset_name: ${{ matrix.asset_name }}.tar.gz
          asset_content_type: application/gzip

  update-changelog:
    name: Update Changelog
    needs: [create-release, build]
    runs-on: ubuntu-latest
    if: github.event_name == 'push'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Update unreleased section
        run: |
          VERSION="${{ needs.create-release.outputs.version }}"
          VERSION_NO_V=${VERSION#v}
          DATE=$(date +%Y-%m-%d)

          # Update the changelog to move unreleased content to the new version
          awk -v version="$VERSION_NO_V" -v date="$DATE" '
          /^## \[Unreleased\]/ {
            print $0
            print ""
            print "### Added"
            print "- _No new features yet_"
            print ""
            print "### Changed"
            print "- _No changes yet_"
            print ""
            print "### Fixed"
            print "- _No fixes yet_"
            print ""
            print "## [" version "] - " date
            next
          }
          { print }
          ' changelog.md > changelog_updated.md

          mv changelog_updated.md changelog.md

      - name: Commit changelog update
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add changelog.md
          git diff --staged --quiet || git commit -m "Update changelog for release ${{ needs.create-release.outputs.version }}"
          git push
