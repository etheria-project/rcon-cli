name: Release

on:
  push:
    tags:
      - 'v*.*.*'
  workflow_dispatch:
    inputs:
      tag:
        description: 'Tag to release'
        required: true
        type: string

env:
  CARGO_TERM_COLOR: always

jobs:
  release:
    name: Release for ${{ matrix.target }}
    runs-on: ${{ matrix.os }}
    permissions:
      contents: write
    strategy:
      fail-fast: false
      matrix:
        include:
          - target: x86_64-pc-windows-msvc
            os: windows-latest
            archive: zip
          - target: x86_64-unknown-linux-gnu
            os: ubuntu-latest
            archive: tar.gz
          - target: x86_64-apple-darwin
            os: macos-latest
            archive: tar.gz
          - target: aarch64-apple-darwin
            os: macos-latest
            archive: tar.gz

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Get version
        id: get_version
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            echo "version=${{ github.event.inputs.tag }}" >> $GITHUB_OUTPUT
          else
            echo "version=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
          fi
        shell: bash

      - name: Cache cargo
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

      - name: Build release binary
        run: cargo build --release --target ${{ matrix.target }}

      - name: Create release archive
        run: |
          binary_name="rcon-cli"
          if [ "${{ matrix.os }}" = "windows-latest" ]; then
            binary_name="rcon-cli.exe"
          fi

          asset_name="rcon-cli-${{ matrix.target }}"
          binary_path="target/${{ matrix.target }}/release/${binary_name}"

          if [ "${{ matrix.archive }}" = "zip" ]; then
            7z a "${asset_name}.zip" "${binary_path}"
            echo "ASSET=${asset_name}.zip" >> $GITHUB_ENV
          else
            tar -czf "${asset_name}.tar.gz" -C "target/${{ matrix.target }}/release" "${binary_name}"
            echo "ASSET=${asset_name}.tar.gz" >> $GITHUB_ENV
          fi
        shell: bash

      - name: Extract changelog
        id: changelog
        if: matrix.target == 'x86_64-unknown-linux-gnu'  # Only run once
        run: |
          VERSION="${{ steps.get_version.outputs.version }}"
          VERSION_NO_V=${VERSION#v}

          if [ -f "changelog.md" ]; then
            awk -v version="$VERSION_NO_V" '
            BEGIN { found=0; content="" }
            /^## \[.*\]/ {
              if (found) exit
              if ($0 ~ "\\[" version "\\]") found=1
              next
            }
            found && /^## \[/ { exit }
            found && !/^## \[/ {
              if (content != "") content = content "\n"
              content = content $0
            }
            END {
              if (content == "") {
                print "### Release " version
                print ""
                print "- See changelog.md for details"
              } else {
                print content
              }
            }
            ' changelog.md > release_notes.md
          else
            echo "### Release $VERSION_NO_V" > release_notes.md
            echo "" >> release_notes.md
            echo "- New release" >> release_notes.md
          fi

      - name: Create/Update Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.get_version.outputs.version }}
          name: Release ${{ steps.get_version.outputs.version }}
          body_path: ${{ matrix.target == 'x86_64-unknown-linux-gnu' && 'release_notes.md' || '' }}
          files: ${{ env.ASSET }}
          draft: false
          prerelease: false